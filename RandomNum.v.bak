


module RandomNum  #( 
	parameter NUM_WIDTH = 10, //10bit wide 
	parameter CNT_INCREMENT = 1, //Value to increment counter by each cycle 
	parameter MAX_VALUE = (2**WIDTH)-1 //Maximum value default is 2^WIDTH - 1 
 )( 
	input clock, 
	input reset, 
	input enable, //Increments when enable is high 
	input backValue, // The startin value can be different with this value(maybe it can be use for delay)
	output reg [(WIDTH-1):0] randomNumValue //countValue //Output is declared as "WIDTH" bits wide 
 ); 
 
 always @ (posedge clock) begin 
		if (reset) begin 
			//When reset is high, set back to 0 
			countValue <= {(WIDTH){backValue}};// 1'b0}}; 
		end else if (enable) begin 
			//Otherwise counter is not in reset 
			if (countValue >= MAX_VALUE[WIDTH-1:0]) begin 
				//If the counter value is equal or exceeds the maximum value 
				countValue <= {(WIDTH){backValue}};// 1'b0}}; 
				//Reset back to 0 
			end else begin 
				//Otherwise increment 
				countValue <= countValue + INCREMENT[WIDTH-1:0]; 
				randomNumValue<=countValue % NUM_WIDTH;
				
			end 
		end 
	end 
 endmodule
